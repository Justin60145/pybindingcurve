from mpmath import mpf, sqrt, power, mp
mp.dps = 100
two_pow_1third = pow(2, 1./3.)


# 1:1 binding
def system01_one_to_one__p_l_kd__pl(p, l, kdpl):
    p = mpf(p)
    l = mpf(l)
    kdpl = mpf(kdpl)
    return ((p+kdpl+l-sqrt(-4*p*l+power(p+kdpl+l, 2)))/2.).real

# competition


def system02_competition__p_l_i_kdpl_kdpi__pl(p, l, i, kdpl, kdpi):
    p = mpf(p)
    l = mpf(l)
    i = mpf(i)
    kdpl = mpf(kdpl)
    kdpi = mpf(kdpi)
    if kdpl == kdpi:
        kdpi += 2e-6
    if kdpl < kdpi:
        return (-(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l)/(3.*(-kdpi+kdpl))-(power(2, 0.3333333333333333)*(-power(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l, 2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-i*kdpl*l-kdpi*kdpl*l-kdpi*power(l, 2))))/(3.*(-kdpi+kdpl)*power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3)+sqrt(power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3), 2)+4*power(-power(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l, 2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-i*kdpl*l-kdpi*kdpl*l-kdpi*power(l, 2)), 3)), 0.3333333333333333))+power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3)+sqrt(power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3), 2)+4*power(-power(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l, 2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-i*kdpl*l-kdpi*kdpl*l-kdpi*power(l, 2)), 3)), 0.3333333333333333)/(3.*power(2, 0.3333333333333333)*(-kdpi+kdpl))).real
    else:
        return (-(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l)/(3.*(-kdpi+kdpl))+((1-complex(0, 1)*sqrt(3))*(-power(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l, 2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-i*kdpl*l-kdpi*kdpl*l-kdpi*power(l, 2))))/(3.*power(2, 0.6666666666666666)*(-kdpi+kdpl)*power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3)+sqrt(power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3), 2)+4*power(-power(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l, 2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-i*kdpl*l-kdpi*kdpl*l-kdpi*power(l, 2)), 3)), 0.3333333333333333))-((1+complex(0, 1)*sqrt(3))*power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3)+sqrt(power(-2*power(p, 3)*power(kdpi, 3)+6*power(p, 3)*power(kdpi, 2)*kdpl-6*power(p, 2)*i*power(kdpi, 2)*kdpl-6*power(p, 2)*power(kdpi, 3)*kdpl-6*power(p, 3)*kdpi*power(kdpl, 2)+12*power(p, 2)*i*kdpi*power(kdpl, 2)-6*p*power(i, 2)*kdpi*power(kdpl, 2)+18*power(p, 2)*power(kdpi, 2)*power(kdpl, 2)-12*p*i*power(kdpi, 2)*power(kdpl, 2)-6*p*power(kdpi, 3)*power(kdpl, 2)+2*power(p, 3)*power(kdpl, 3)-6*power(p, 2)*i*power(kdpl, 3)+6*p*power(i, 2)*power(kdpl, 3)-2*power(i, 3)*power(kdpl, 3)-18*power(p, 2)*kdpi*power(kdpl, 3)+24*p*i*kdpi*power(kdpl, 3)-6*power(i, 2)*kdpi*power(kdpl, 3)+18*p*power(kdpi, 2)*power(kdpl, 3)-6*i*power(kdpi, 2)*power(kdpl, 3)-2*power(kdpi, 3)*power(kdpl, 3)+6*power(p, 2)*power(kdpl, 4)-12*p*i*power(kdpl, 4)+6*power(i, 2)*power(kdpl, 4)-18*p*kdpi*power(kdpl, 4)+12*i*kdpi*power(kdpl, 4)+6*power(kdpi, 2)*power(kdpl, 4)+6*p*power(kdpl, 5)-6*i*power(kdpl, 5)-6*kdpi*power(kdpl, 5)+2*power(kdpl, 6)+6*power(p, 2)*power(kdpi, 3)*l-15*power(p, 2)*power(kdpi, 2)*kdpl*l+3*p*i*power(kdpi, 2)*kdpl*l+3*p*power(kdpi, 3)*kdpl*l+12*power(p, 2)*kdpi*power(kdpl, 2)*l-9*p*i*kdpi*power(kdpl, 2)*l-3*power(i, 2)*kdpi*power(kdpl, 2)*l-3*p*power(kdpi, 2)*power(kdpl, 2)*l-6*i*power(kdpi, 2)*power(kdpl, 2)*l-3*power(kdpi, 3)*power(kdpl, 2)*l-3*power(p, 2)*power(kdpl, 3)*l+6*p*i*power(kdpl, 3)*l-3*power(i, 2)*power(kdpl, 3)*l-3*p*kdpi*power(kdpl, 3)*l+9*i*kdpi*power(kdpl, 3)*l+12*power(kdpi, 2)*power(kdpl, 3)*l+3*p*power(kdpl, 4)*l-3*i*power(kdpl, 4)*l-15*kdpi*power(kdpl, 4)*l+6*power(kdpl, 5)*l-6*p*power(kdpi, 3)*power(l, 2)+12*p*power(kdpi, 2)*kdpl*power(l, 2)+3*i*power(kdpi, 2)*kdpl*power(l, 2)+3*power(kdpi, 3)*kdpl*power(l, 2)-3*p*kdpi*power(kdpl, 2)*power(l, 2)-12*i*kdpi*power(kdpl, 2)*power(l, 2)+3*power(kdpi, 2)*power(kdpl, 2)*power(l, 2)-3*p*power(kdpl, 3)*power(l, 2)+3*i*power(kdpl, 3)*power(l, 2)-12*kdpi*power(kdpl, 3)*power(l, 2)+6*power(kdpl, 4)*power(l, 2)+2*power(kdpi, 3)*power(l, 3)-3*power(kdpi, 2)*kdpl*power(l, 3)-3*kdpi*power(kdpl, 2)*power(l, 3)+2*power(kdpl, 3)*power(l, 3), 2)+4*power(-power(p*kdpi-p*kdpl+i*kdpl+kdpi*kdpl-power(kdpl, 2)+2*kdpi*l-kdpl*l, 2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-i*kdpl*l-kdpi*kdpl*l-kdpi*power(l, 2)), 3)), 0.3333333333333333))/(6.*power(2, 0.3333333333333333)*(-kdpi+kdpl))).real


# Dimer formption
def system03_homodimer_formation__p_kdpp__pp(p, kdpp):
    p = mpf(p)
    kdpp = mpf(kdpp)
    return ((4*p+kdpp-sqrt(kdpp)*sqrt(8*p+kdpp))/8.).real

# Dimer breaking


def system04_homodimer_breaking__p_l_kdpp_kdpl(p, l, kdpp, kdpl):
    p = mpf(p)
    l = mpf(l)
    kdpp = mpf(kdpp)
    kdpl = mpf(kdpl)
    return [
        (-(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l)/(12.*kdpp)-(-power(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l, 2)+12*kdpp*(power(p, 2)*kdpp+4*p*power(kdpl, 2)+kdpp*power(kdpl, 2)-2*p*kdpp*l+2*kdpp*kdpl*l+kdpp*power(l, 2)))/(6.*power(2, 0.6666666666666666)*kdpp*power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3)+sqrt(power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3), 2)+4*power(-power(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l, 2)+12*kdpp*(power(p, 2)
kdpp+4*p*power(kdpl, 2)+kdpp*power(kdpl, 2)-2*p*kdpp*l+2*kdpp*kdpl*l+kdpp*power(l, 2)), 3)), 0.3333333333333333))+power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3)+sqrt(power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3), 2)+4*power(-power(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l, 2)+12*kdpp*(power(p, 2)*kdpp+4*p*power(kdpl, 2)+kdpp*power(kdpl, 2)-2*p*kdpp*l+2*kdpp*kdpl*l+kdpp*power(l, 2)), 3)), 0.3333333333333333)/(12.*power(2, 0.3333333333333333)*kdpp)).repl,
        (-(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l)/(12.*kdpp)+((1-complex(0, 1)*sqrt(3))*(-power(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l, 2)+12*kdpp*(power(p, 2)*kdpp+4*p*power(kdpl, 2)+kdpp*power(kdpl, 2)-2*p*kdpp*l+2*kdpp*kdpl*l+kdpp*power(l, 2))))/(12.*power(2, 0.6666666666666666)*kdpp*power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3)+sqrt(power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3), 2)+4*power(-power(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l, 2)+12*kdpp*(power(p, 2)
kdpp+4*p*power(kdpl, 2)+kdpp*power(kdpl, 2)-2*p*kdpp*l+2*kdpp*kdpl*l+kdpp*power(l, 2)), 3)), 0.3333333333333333))-((1+complex(0, 1)*sqrt(3))*power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3)+sqrt(power(-16*power(p, 3)*power(kdpp, 3)+60*power(p, 2)*power(kdpp, 4)+24*p*power(kdpp, 5)+2*power(kdpp, 6)+96*power(p, 2)*power(kdpp, 2)*power(kdpl, 2)-96*p*power(kdpp, 3)*power(kdpl, 2)-12*power(kdpp, 4)*power(kdpl, 2)-192*p*kdpp*power(kdpl, 4)-48*power(kdpp, 2)*power(kdpl, 4)+128*power(kdpl, 6)+48*power(p, 2)*power(kdpp, 3)*l-120*p*power(kdpp, 4)*l-24*power(kdpp, 5)*l-288*p*power(kdpp, 3)*kdpl*l-72*power(kdpp, 4)*kdpl*l+96*p*power(kdpp, 2)*power(kdpl, 2)*l-48*power(kdpp, 3)*power(kdpl, 2)*l-288*power(kdpp, 2)*power(kdpl, 3)*l-384*kdpp*power(kdpl, 4)*l-48*p*power(kdpp, 3)*power(l, 2)+60*power(kdpp, 4)*power(l, 2)+288*power(kdpp, 3)*kdpl*power(l, 2)+240*power(kdpp, 2)*power(kdpl, 2)*power(l, 2)+16*power(kdpp, 3)*power(l, 3), 2)+4*power(-power(-4*p*kdpp-power(kdpp, 2)-4*power(kdpl, 2)+4*kdpp*l, 2)+12*kdpp*(power(p, 2)*kdpp+4*p*power(kdpl, 2)+kdpp*power(kdpl, 2)-2*p*kdpp*l+2*kdpp*kdpl*l+kdpp*power(l, 2)), 3)), 0.3333333333333333))/(24.*power(2, 0.3333333333333333)*kdpp)).repl
    ]
