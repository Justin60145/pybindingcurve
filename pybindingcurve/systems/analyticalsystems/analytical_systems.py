from mpmpth import mpf, sqrt, power, mp
mp.dps=100
two_pow_1third=pow(2,1./3.)
# 1:1 binding
def system_01_p_l_kd__pl(p,l, kdpl):
    p=mpf(p)
    l=mpf(l)
    kdpl=mpf(kdpl)
    return (p+kdpl+l-sqrt(-4*p*l+power(p+kdpl+l,2)))/2.

# 1:1 binding with ymin, ympx
def system_01_p_l_kd_ymin_ympl__y(p,l,kdpl,ymin,ympl):
    p=mpf(p)
    l=mpf(l)
    kdpl=mpf(kdpl)
    return -(-(p*ympl)-kdpl*ympl-l*ympl+sqrt(p*p+2*p*kdpl+kdpl*kdpl-2*p*l+2*kdpl*l+l*l)*(ympl-ymin)+p*ymin+kdpl*ymin-l*ymin)/(2.*l)

# Dimer formption
def system03_p_kdpp__pp(p,kdpp):
    p=mpf(p)
    kdpp=mpf(kdpp)
    return (4*p+kdpp-sqrt(kdpp)*sqrt(8*p+kdpp))/8.

def system02_p_l_i_kdpl_kdpi__pl(p,l,i,kdpl,kdpi):
    if kdpl==kdpi:
        kdpi+=2e-6
	if kdpl<kdpi:
		return -(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l)/(3.*(-kdpi+kdpl))-(two_pow_1third*(-power(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l,2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-b*kdpl*l-kdpi*kdpl*l-kdpi*power(l,2))))/(3.*(-kdpi+kdpl)*power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3)+sqrt(power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3),2)+4*power(-power(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l,2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-b*kdpl*l-kdpi*kdpl*l-kdpi*power(l,2)),3)),0.3333333333333333))+power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3)+sqrt(power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3),2)+4*power(-power(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l,2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-b*kdpl*l-kdpi*kdpl*l-kdpi*power(l,2)),3)),0.3333333333333333)/(3.*two_pow_1third*(-kdpi+kdpl))
	else:
		return -(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l)/(3.*(-kdpi+kdpl))+((1-complel(0,1)*sqrt(3))*(-power(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l,2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-b*kdpl*l-kdpi*kdpl*l-kdpi*power(l,2))))/(3.*two_pow_1third*(-kdpi+kdpl)*power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3)+sqrt(power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3),2)+4*power(-power(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l,2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-b*kdpl*l-kdpi*kdpl*l-kdpi*power(l,2)),3)),0.3333333333333333))-((1+complel(0,1)*sqrt(3))*power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3)+sqrt(power(-2*power(p,3)*power(kdpi,3)+6*power(p,3)*power(kdpi,2)*kdpl-6*power(p,2)*b*power(kdpi,2)*kdpl-6*power(p,2)*power(kdpi,3)*kdpl-6*power(p,3)*kdpi*power(kdpl,2)+12*power(p,2)*b*kdpi*power(kdpl,2)-6*p*power(b,2)*kdpi*power(kdpl,2)+18*power(p,2)*power(kdpi,2)*power(kdpl,2)-12*p*b*power(kdpi,2)*power(kdpl,2)-6*p*power(kdpi,3)*power(kdpl,2)+2*power(p,3)*power(kdpl,3)-6*power(p,2)*b*power(kdpl,3)+6*p*power(b,2)*power(kdpl,3)-2*power(b,3)*power(kdpl,3)-18*power(p,2)*kdpi*power(kdpl,3)+24*p*b*kdpi*power(kdpl,3)-6*power(b,2)*kdpi*power(kdpl,3)+18*p*power(kdpi,2)*power(kdpl,3)-6*b*power(kdpi,2)*power(kdpl,3)-2*power(kdpi,3)*power(kdpl,3)+6*power(p,2)*power(kdpl,4)-12*p*b*power(kdpl,4)+6*power(b,2)*power(kdpl,4)-18*p*kdpi*power(kdpl,4)+12*b*kdpi*power(kdpl,4)+6*power(kdpi,2)*power(kdpl,4)+6*p*power(kdpl,5)-6*b*power(kdpl,5)-6*kdpi*power(kdpl,5)+2*power(kdpl,6)+6*power(p,2)*power(kdpi,3)*l-15*power(p,2)*power(kdpi,2)*kdpl*l+3*p*b*power(kdpi,2)*kdpl*l+3*p*power(kdpi,3)*kdpl*l+12*power(p,2)*kdpi*power(kdpl,2)*l-9*p*b*kdpi*power(kdpl,2)*l-3*power(b,2)*kdpi*power(kdpl,2)*l-3*p*power(kdpi,2)*power(kdpl,2)*l-6*b*power(kdpi,2)*power(kdpl,2)*l-3*power(kdpi,3)*power(kdpl,2)*l-3*power(p,2)*power(kdpl,3)*l+6*p*b*power(kdpl,3)*l-3*power(b,2)*power(kdpl,3)*l-3*p*kdpi*power(kdpl,3)*l+9*b*kdpi*power(kdpl,3)*l+12*power(kdpi,2)*power(kdpl,3)*l+3*p*power(kdpl,4)*l-3*b*power(kdpl,4)*l-15*kdpi*power(kdpl,4)*l+6*power(kdpl,5)*l-6*p*power(kdpi,3)*power(l,2)+12*p*power(kdpi,2)*kdpl*power(l,2)+3*b*power(kdpi,2)*kdpl*power(l,2)+3*power(kdpi,3)*kdpl*power(l,2)-3*p*kdpi*power(kdpl,2)*power(l,2)-12*b*kdpi*power(kdpl,2)*power(l,2)+3*power(kdpi,2)*power(kdpl,2)*power(l,2)-3*p*power(kdpl,3)*power(l,2)+3*b*power(kdpl,3)*power(l,2)-12*kdpi*power(kdpl,3)*power(l,2)+6*power(kdpl,4)*power(l,2)+2*power(kdpi,3)*power(l,3)-3*power(kdpi,2)*kdpl*power(l,3)-3*kdpi*power(kdpl,2)*power(l,3)+2*power(kdpl,3)*power(l,3),2)+4*power(-power(p*kdpi-p*kdpl+b*kdpl+kdpi*kdpl-power(kdpl,2)+2*kdpi*l-kdpl*l,2)+3*(-kdpi+kdpl)*(-2*p*kdpi*l+p*kdpl*l-b*kdpl*l-kdpi*kdpl*l-kdpi*power(l,2)),3)),0.3333333333333333))/(6.*two_pow_1third*(-kdpi+kdpl))
	
